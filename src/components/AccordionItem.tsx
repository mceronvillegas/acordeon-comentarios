// âœ… Importamos el tipo CommentType
// Este tipo define la estructura que tiene cada comentario (id, name, email, body, etc.)
import type { CommentType } from "../types/CommentTypes";

// âœ… Definimos los props (propiedades) que el componente recibirÃ¡
// comment â†’ el comentario individual que se mostrarÃ¡
// isOpen â†’ un booleano que indica si este acordeÃ³n estÃ¡ abierto o cerrado
// onToggle â†’ funciÃ³n que se ejecuta al hacer clic para abrir/cerrar el acordeÃ³n
type AccordionItemProps = {
    comment: CommentType;
    isOpen: boolean;
    onToggle: () => void;
};

// âœ… Definimos el componente funcional AccordionItem
// Usamos destructuring para extraer directamente los props en los parÃ¡metros
export default function AccordionItem({ comment, isOpen, onToggle }: AccordionItemProps) {
    return (
        // ðŸ”¹ Contenedor principal del acordeÃ³n
        <div className="border border-gray-300 rounded-lg bg-blue-300 shadow-sm">

            {/* ðŸ”¹ BotÃ³n que muestra el tÃ­tulo del comentario */}
            {/* Al hacer clic, llama a la funciÃ³n onToggle (pasada desde CommentsPage) */}
            <button
                onClick={onToggle}
                className="w-full text-left p-4 font-semibold hover:bg-blue-50 transition"
            >
                {comment.name} {/* ðŸ‘ˆ Mostramos el nombre del comentario */}
            </button>

            {/* ðŸ”¹ Si "isOpen" es true, mostramos el contenido (cuerpo y correo) */}
            {isOpen && (
                <div className="p-4 border-t border-gray-200 bg-gray-50">
                    {/* Cuerpo del comentario */}
                    <p className="text-gray-700 text-sm mb-1">{comment.body}</p>

                    {/* Email del autor del comentario */}
                    <p className="text-xs text-gray-500 italic">{comment.email}</p>
                </div>
            )}
        </div>
    );
}

