// âœ… Importamos la funciÃ³n configureStore desde Redux Toolkit
// Esta funciÃ³n nos permite crear fÃ¡cilmente el "store" (almacenamiento global del estado)
import { configureStore } from "@reduxjs/toolkit";

// âœ… Importamos el reducer de los comentarios
// Este reducer viene del archivo commentsSlice.ts y maneja la lÃ³gica de los comentarios
import commentsReducer from "./commentsSlice";

// âœ… Creamos el store principal de la aplicaciÃ³n
// AquÃ­ es donde registramos todos los "slices" (rebanadas de estado global)
export const store = configureStore({
    reducer: {
        comments: commentsReducer, // ðŸ‘ˆ Estado global "comments" controlado por commentsSlice
    },
});

// âœ… Tipado para TypeScript

// RootState â†’ Representa la forma completa del estado global de la app
// (Es Ãºtil cuando usamos useSelector para leer datos del store)
export type RootState = ReturnType<typeof store.getState>;

// AppDispatch â†’ Representa el tipo de la funciÃ³n dispatch()
// (Sirve para despachar acciones con tipado correcto en Redux)
export type AppDispatch = typeof store.dispatch;
